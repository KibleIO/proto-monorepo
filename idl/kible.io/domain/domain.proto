syntax = "proto3";

option go_package = "gaia/src/kible.io/gen/domainpb";

package kible.domain;

import "gaia/account.proto";
import "gaia/server.proto";
import "gaia/universal.proto";

// external facing API
service DOMAIN {
	rpc GetInstancePath (GetInstancePathRequest) returns (GetInstancePathResponse) {}
	rpc GetInstancePathFromContainerId (GetInstancePathFromContainerIdRequest) returns (GetInstancePathFromContainerIdResponse) {}
	rpc GetInstances (GetInstancesRequest) returns (GetInstancesResponse) {}
	rpc GetDomainContainer (GetDomainContainerRequest) returns (GetDomainContainerResponse) {}
	rpc UpdateDomainContainerVersion (UpdateDomainContainerVersionRequest) returns (UpdateDomainContainerVersionResponse) {}
}

message GetInstancePathRequest {
	kible.gaia.AccountUUID accountID = 1;
	kible.gaia.ServerUUID serverID = 2;
	string domain = 3;
}

message GetInstancePathResponse {
	string path = 1;
}

message GetInstancePathFromContainerIdRequest {
	string containerID = 1;
}

message GetInstancePathFromContainerIdResponse {
	string path = 1;
}

message GetInstancesRequest {
	kible.gaia.Empty empty = 1;
}

message GetInstancesResponse {
	repeated string containerIDs = 1;
}

message GetDomainContainerRequest {
	string domainContainerID = 1;
}

message GetDomainContainerResponse {
	string accountID = 1;
	string serverID = 2;
	string containerID = 3;
	string path = 4;
	int32 port = 5;
	bool isUsed = 6;
	string version = 7;
}

message UpdateDomainContainerVersionRequest {
	string containerID = 1;
	string version = 2;
}

message UpdateDomainContainerVersionResponse {
	string accountID = 1;
	string serverID = 2;
	string containerID = 3;
	string path = 4;
	int32 port = 5;
	bool isUsed = 6;
	string version = 7;
}